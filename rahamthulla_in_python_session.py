# -*- coding: utf-8 -*-
"""Rahamthulla in Python_Session.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FPmhlMZI9Hxq8lM0qm6E_2U0K9DHU6bB

**# Day - 1**

Data types
"""



# Integer
# Pre-defined functions

type(1)

# do this 
#write the value 12.4 and tell me the output
type(12.4)

type('string')

type("string")

# To - do 
type('2')

type(1j + 2)

#List
type([1,2,3,4,4,5,6])

# TO do
# Make a list and tuple mentioning each data type

# Tuple
type((1,2,34,5,6))

#Dictionary
Expression - {key:value, key1:value1}

{'Name':'Raju', 'Roll_no': 234, 'Age':26, 'Address':'fwkjgfiygku'}

type({'Name':'Raju', 'Roll_no': 234, 'Age':26, 'Address':'fwkjgfiygku'})

#Make a dictionary adding your Name and your basic details

#Print function
print("Hello my name is Prachi Tare and I will be the mentor to this session.")

print(1)

# To do 
# You have to print the type of the data and store it.
# MVP should be realistic rather than idealistic. It should be conservative rather than ambitious. If all else fails, knowing that you achieve your MVP is a huge accomplishment.

# Variables and identifiers
str1 = 'Hello my name is Prachi Tare and I will be the mentor to this session'

str1

"""### Data operators - """

34 * 65

a = 35
b = 65

# Multiplication
*
# subtraction
-
# Floor division 
//
# Division 
/
# Addition
+

# Exponention
a**b

#store into a variable and print the variable

34 == 25

"""Python Logical Operators

1.AND

2.OR

3.NOT
"""

#and operator
23>45 and 49 == 49

"""or operator"""

23<45 or 49!=49

'Rahim'=='rahim'

"""not operator"""

not('Rehaman'=='rehaman')

"""# DAY-2 PYTHON_SESSION"""

#manipulatio of list
#To do
#you have to make your own list(all the items are integers)

#append
ap=[1,2,3,4,5]
ap.append(10)
print(ap)

#insert
ins=[4,5,6,2,8]
ins.insert(4,12)
print(ins)

#extend function
ex1 = [1,2,3,4,5,6,7]
ex2 = [4,8,9,10.34]
ex1.extend(ex2)
print(ex1)

ex1 = [1,2,3,4,5,6,7]
ex2 = [4,8,9,10.34]
ex1.extend(ex2)
ex2.extend(ex1)
print("extend list after adding ex2",ex1)
print("extend list after adding ex1",ex2 )

#sum
print(sum(ex2))

# Indexing

In = [6,7,8,9,2,3,4,1]
In.index(3)

In[3]

In[3:7]

min(In)

In[3:8]

dc=(3,4,6,3,2,2,0.75,4,6,7,8,34,7,6)
min(dc)

#max
max(dc)

# max

print('mac of dc is',max(dc))

pop1 = [1,2,3,4,5,6,7,8,9]

a=pop1.pop(4)
print(pop1)
print(a)

pop1.pop()

# Remove 
remove1 = [2.3,4,3,8,17]
b = remove1.remove(4)
print(remove1)
print(b)

#To Do
#Write a swapping function where a == c, b ==a, c = b 
a = 12
b = 3
c = 45
temp = a
a = c
c = b
b = temp
print(a)
print(b)
print(c)

x = 23
y = 9
"""
temp = x
x = y
y = temp
print(x)
print(y)
"""
x,y = y,x
print(x)
print(y)

name = 'dlitHe Institute'
course = 'Python certification'

name.capitalize()

name.count("t")

name.find("u")

name.isalpha()

name.islower()

name.isupper()

name.lower()

name.upper()

a = "Python is a programming language"
a.split("is")

b = "Python"
c = "language"

b + " "+ c

a*3

str1 = 'Hello this is rehaman'

len(str1)

str1[6]

str1[9:12]

str1.replace('the','a')

"""# DAY-3 TUPLE"""

this1 = (('burger','pizza','biryani','chicken kabab'))

this1[2]

this1[1:3]

tuple1 = (('mango','banana'))
tuple3 = tuple1+this1
print(tuple3)

#dictionary
dict1 = {"name":"rehaman","age":22, "education":"MCA"}

#deleting
del dict1["age"]

print(dict1)

#adding
dict1["number"]=94944

dict1["college"]="BMSIT"

print(dict1)

#pop
dict1.pop("na")

print(dict1)

#constructor
temp = dict(Brand="apple",model=11)

temp = {"year":2000}

cp=dict(temp)
print(cp)

#to-do
#Create a tuple ('Hello','World') 
tup = tuple(("hello","world"))
print(tup)

tu1 = tuple("hello")  
tu2 = tuple("world")
tu3 = tu1 + tu2
print(tu3)

TU = tuple("Hello",) *3
print(TU)

# Tuple unpacking

tuple4 = ("hello",'Good','People')
a,b,c = tuple4
print(a)
print(b)
print(c)

if condition:
  Statement 1 
  stat2

stat3

else :
  stat4



i = 5
if(i<25):
  print("i is less than 25")

print('I am not in if block')

string = 'Parade'

if string == 'Parade':
  print('hello')
    string = string*3
    print(string)


 # To - do 
 # Specify what it is doing
 # Also mention and clear errors

"""Also mention and clear errors"""

i = 20 
if (i<15):
  print("i is smaller than 15")
  print("I am in if block")

else:
  print("i is greater or equal to 15")
  print("i am in else block ")

# Nested if-else
# add all the comments
i = 4
if (i == 40):
  if(i<=15):
    print("i is smaller than 15")

  if(i<12):
    print("i is smaller than 12 too")

  else:
    print('i is greater than 15')

else:
  print('i is not 40')

"""# DAY-4"""

#if-else
i=40
if (i == 30):
  print("i is equal to 30")
  print("we are in if block")
elif (i == 40):
  print("i is 40")
  print("we are in elif 1 block")
elif (i == 50):
  print("i is 50")
  print("we are in elif 2 block")
else:
  print("i is equal to nothing")

# short hand if-statement
if condition:  statement

#to-do
stt = 'Rahamthulla'
if stt < 'Raham': print('Rahamthulla')
else: print('Raham')
#you have to explore if-else short hand code
##else - i is greater than or equal to 10

i = 20
if i < 15: print('i is less than 15')
else: print('i is greater than or equal to 10')

"""# FOR LOOP"""

for var in iterable:
  # statements

#for loop
L = [1,2,3,4,5,6,7]
for i in L:
  print(i)

#iterating caharacters of strings from the given list
ab = ['Apple','Banana','orange']
for i in ab:
  print(i)
  for j in i:
    print(j)

#replace a 'Banana' with mushroom and print the new list
lst1 = ["Apple","Mango","Banana"]
lst2 = [i.replace("Banana","grapes") for i in lst1]
print(lst2)

#print key-valur pair of dictionary
a = dict()
a[1] = 94944
a[2] = 63010
for i in a:
  print(i,a[i])

#break(breaks the loop)
for letter in 'hihowareyou':
  if letter == 'e' or letter == 'w':
    break
  print(letter)
print('current letter', letter)

#pass(skips and passes the loop)
for letter in 'hihowareyou':
  if letter == 'e' or letter == 'w':
    pass
print('current letter', letter)

#continue(stops the current ittiration and goes to the next)
for letter in 'hihowareyou':
  if letter == 'e' or letter == 'w':
    continue
  print('current letter', letter)

"""Range of the loop"""

#range function
list(range(1,15,1)) #list(range(start, end, iterating step))

#using 'end' for formulating output in print statement
l = [12,13,14,15,16]
for i in range(len(l)):
  print(l[i], end=" ")
print()

#to-do
#perform the sum of first 10 natural numbers
sum=0
for i in range(1,11):#11 as it skips the last element
  sum=sum+i
print(sum)

while expression:
  statement(s)

count = 0
while (count<3):
  count+= 1
  print('hello')

p = [4,5,6,3]
while p:
  print(p.pop())

i = 0
stat = 'hithere'

while i<len(stat):
  if stat[i] == 'e':
    i+=1
    continue
  print('current letter',stat[i])
  i +=1

i = 0
stat = 'helloworld'

while i<len(stat):
  if stat[i] == 'e':
    i+=1
    pass
  print('current letter',stat[i])
  i +=1

i = 0
a = 'helloworld'

while i<len(a):
  if a[i] == 'e':
    i+=1
    break
  print('current letter',a[i])
  i +=1

"""# DAY-5"""

#zip coding
questions = ['Name', 'Color', 'Shape']
answers = ['Mango', 'Orange', 'Banana']
for question, answer in zip(questions,answers):
  print('What is your {0}? I am {1}.'.format(question,answer))

l = list(input().split())
for i in l:
  print(i)

"""# DAY-6

# PANDAS
"""

#to install pandas
!pip3 install pandas



!pip install numpy



# Importing the library

import pandas as pd
import numpy as np

data = [1,2,3,4,45,6,7,'m']
d = pd.Series(data)
df = pd.DataFrame(d)
print(df)

d = pd.date_range('20220310', periods = 10)
print(d)

df = pd.DataFrame({'A':[1,2,3,4],
                   'B':pd.Timestamp('20220310'),
                   'C':pd.Series(1,index = list(range(4))),
                   'D': np.array([5]*4, dtype = 'int32'),
                   'E': pd.Categorical(['test','train','train','test'])})

type(df)

df

df.dtypes

df.head(3)

df.tail()

df.head()

df.to_numpy()

df.index

df.columns

df.describe()

df.sort_index(axis = 1, ascending = False)

df.sort_values(by = 'A')

df = pd.Series([1,2,3,np.nan,4,5]).shift(2)

df

df.apply(np.cumsum)

df.value_counts()

s = pd.Series(['education','Jupyther','Python',np.nan])

s.str.upper()

#Importing the library

import pandas as pd

# Importing the dataset
df = pd.read_csv('m.csv')

df.head()

df.tail()

"""# DAY-7 NUMPY"""

!pip3 install numpy

import numpy as np

a = np.empty((3,2,1))
a

np.empty((1))

np.zeros((3,2,1))

a = np.arange

np.linspace(1,10)

10.20408163-10

np.linspace(1,10,5)

3.25 - 1.00



np.logspace(1,10)

np.random.rand(2,2,2)

d = np.random.randint(0,10,size = (5,5))

1.18367347 - 1.0

d[:,:]

d[:,2]

d[2:5,1:3]



"""# concatenation"""

a = np.random.randint(0,10,size = (5,5))

b = np.random.randint(0,10,size = (5,5))

np.vstack([a,b])

d

np.vsplit(d,[2])

d1,d2 = np.vsplit(d,[1])

d1

d2

d.size

d.reshape(25,1)

d.reshape(1,25)

import time
import sys

s = range(1000)
print(sys.getsizeof(5)*len(s))

d = np.arange(1000)

print(d.size*d.itemsize)

a.sum(axis = 0)

np.sqrt(a)

print(a+b)

a.ravel()

import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0,3*np.pi,0.1)
y = np.sin(x)

plt.plot(x,y)

ar = np.array([1,2,3])
np.exp(ar)

np.log(ar)

np.log10(ar)

"""## matplotlib"""

!pip install matplotlib

import matplotlib.pyplot as plt

x = [2017,2018,2019,2020,2021]
y = [432,341,234,345,363]
plt.plot(x,y)

years = [1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015]
pops = [1.2,3.4,2.3,3.2,3.5,2.1,2.1,2.4,1.0,1.3,1.5,1.7,2.3,1.9]
plt.plot(years,pops, color = 'blue')
plt.ylabel("population in billions")
plt.xlabel('Population Growth by year')
plt.title('Population Growth')
plt.savefig('a.png')

x = [1,6,3]
y = [5,9,4]

x2 = [1,2,3]
y2 = [10,14,12]

plt.plot(x,y,label = 'First line')
plt.plot(x2,y2, label = 'Second Line')
plt.xlabel('PLot Nummber')
plt.ylabel('Important var')
plt.title('Interesting Graph!')
plt.legend()

years = [1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015]
pops = [1.2,3.4,2.3,3.2,3.5,2.1,2.1,2.4,1.0,1.3,1.5,1.7,2.3,1.9]
death =[1.1,3.2,1.0,2.1,1.4,1.2,1.7,2.1,2.5,2.3,2.4,1.7,1.9,1.5]
plt.plot(years,pops,'.',color = 'orange',label = 'Birth by year')
plt.plot(years,death,color = 'red',label = 'Death by year')
plt.ylabel("Population in billions")
plt.xlabel('Population stat by year')
plt.title('Population Growth')
plt.legend()



years = [1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015]
pops = [1.2,3.4,2.3,3.2,3.5,2.1,2.1,2.4,1.0,1.3,1.5,1.7,2.3,1.9]
death =[1.1,3.2,1.0,2.1,1.4,1.2,1.7,2.1,2.5,2.3,2.4,1.7,1.9,1.5]
lines = plt.plot(years,pops,years,death)
plt.grid()
plt.setp(lines,color = 'red',marker = '*')

labels = ['Python','C','SQL','HTML','Java','DS']
sizes = [33,52,12,17,42,48]
plt.pie(sizes, labels = labels,autopct = '%1.1f%%')
plt.axis('equal')

import pandas as pd
raw_data = {'names':['Nick','Sani','John','Rubi','Maya'],
            'jan_ir':[123,124,125,126,128],
            'feb_ir':[23,24,25,27,29],
            'March_ir':[3,5,7,6,9]}
df = pd.DataFrame(raw_data,columns = ['names','jan_ir','feb_ir','march_ir'])

df
# make a new colum name total_ir which is a sum of Jan, feb and ,march
# Plot a pie chart using total_ir column and label as names column

"""# 16-03-2022"""

import numpy as np
import matplotlib.pyplot as plt

korea_scores = (554,536,538)
canada_scores = (518,523,525)
china_scores = (413,570,580)
france_scores = (495,505,499)
index = np.arange(3)
bar_width = 0.2
k1 = plt.bar(index,korea_scores,bar_width,alpha = 0.9,label = 'korea')
c1 = plt.bar(index+bar_width,canada_scores,bar_width,alpha = 0.9,label = 'Canada')
ch1 = plt.bar(index+bar_width*2,china_scores,bar_width,alpha = 0.9,label = 'China')
f1 = plt.bar(index+bar_width*3,france_scores,bar_width,alpha = 0.9,label = 'France')
plt.xticks(index + 0.3,('Maths','Reading','Science'))
plt.ylabel('Mean scores in PISA 2021')
plt.xlabel('Subjects')
plt.title('Test scores by Country')
plt.grid(True)
plt.legend()

plt.bar([1,3,5,7,9],[5,2,7,8,2], label = 'Example one')
plt.bar([2,34,6,8,10],[8,6,2,5,6],label = 'Example two',color = 'yellow')
plt.legend()
plt.ylabel('bar width')
plt.xlabel('Bar Number')
plt.title('Epic Graph')

population_ages = [12,34,31,23,122,15,145,543,135,135,134,351,63,24,72,151,63,24,62,31]
bins = [10,20,30,40,50,60,70,80,90,100,110,120,130,140]
plt.hist(population_ages,bins,color = 'pink')

x = [1,2,3,4,5,6,7,8]
y = [5,2,4,2,1,4,5,2]
plt.scatter(x,y,label = 'Scatter plot',color = 'g')
plt.ylabel('y')
plt.xlabel('x')
plt.title('Interesting Graph')
plt.legend()

# Stackplot

days = [1,2,3,4,5]
sleeping = [7,8,6,11,7]
eating = [2,3,4,3,2]
working = [7,8,7,2,2]
playing = [4,5,3,2,1]
plt.stackplot(days,sleeping,eating,working,playing,colors = ['y','g','r','k'])

# Line 3d plot
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x = [1,2,3,4,5,6,7,8,9,10]
y = [1,5,3,6,3,6,3,9,6,3]
z = [4,2,7,5,7,9,5,4,3,5]

ax1.plot(x,y,z,c = 'r',marker = 'o')

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')

# Line 3d plot
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('ggplot')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x = [1,2,3,4,5,6,7,8,9,10]
y = [1,5,3,6,3,6,3,9,6,3]
z = [4,2,7,5,7,9,5,4,3,5]

ax1.scatter(x,y,z,c = 'g',marker = 'o')

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')

# Line 3d plot
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x = [1,2,3,4,5,6,7,8,9,10]
y = [1,5,3,6,3,6,3,9,6,3]
z = np.zeros(10)

dx = np.ones(10)
dy = np.ones(10)
dz = [1,2,3,4,5,6,7,8,9,10]

ax1.bar3d(x,y,z,dx,dy,dz)

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')

# Line 3d plot
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x,y,z = axes3d.get_test_data()
ax1.plot_wireframe(x,y,z,rstride = 3,cstride = 3)

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')

"""# 18-03-2022"""

data['churn'] = data['churn'].astype('int4')